{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Project CodeGuard: Security Rules for AI Coding Agents","text":"<p>Project CodeGuard is an open-source, model-agnostic security framework that embeds secure-by-default practices into AI coding agent workflows. It provides comprehensive security rules that guide AI assistants to generate more secure code automatically.</p>"},{"location":"#why-project-codeguard","title":"Why Project CodeGuard?","text":"<p>AI coding agents are transforming software engineering, but this speed can introduce security vulnerabilities. Is your AI coding agent implementation introducing security vulnerabilities?</p> <ul> <li>\u274c Skipping input validation</li> <li>\u274c Hardcoding secrets and credentials</li> <li>\u274c Using weak cryptographic algorithms</li> <li>\u274c Relying on unsafe functions</li> <li>\u274c Missing authentication/authorization checks</li> <li>\u274c Missing any other security best practice</li> </ul> <p>Project CodeGuard solves this by embedding security best practices directly into AI coding agent workflows. </p> <p>Before, During, and After Code Generation.</p> <p>Project CodeGuard can be used before, during and after code generation. They can be used at the AI agent planning phase or for initial specification-driven engineering tasks. Project CodeGuard rules can also be used to prevent vulnerabilities from being introduced during code generation. They can also be used by automated code-review AI agents. </p> <p>For example, a rule focused on input validation could work at multiple stages: it might suggest secure input handling patterns during code generation, flag potentially unsafe user or AI agent input processing in real-time and then validate that proper sanitization and validation logic is present in the final code. Another rule targeting secret management could prevent hardcoded credentials from being generated, alert developers when sensitive data patterns are detected, and verify that secrets are properly externalized using secure configuration management. </p> <p>This multi-stage methodology ensures that security considerations are woven throughout the development process rather than being an afterthought, creating multiple layers of protection while maintaining the speed and productivity that make AI coding tools so valuable. </p>"},{"location":"#security-coverage","title":"Security Coverage","text":"<p>Our rules cover essential security domains:</p> <ul> <li>\ud83d\udd10 Cryptography: Safe algorithms (including post-quantum cryptography), secure key management, certificate validation</li> <li>\ud83d\udee1\ufe0f Input Validation: SQL injection prevention, XSS protection, command injection defense</li> <li>\ud83d\udd11 Authentication: MFA best practices, OAuth/OIDC, secure session management</li> <li>\u26a1 Authorization: RBAC/ABAC, access control, IDOR prevention</li> <li>\ud83d\udce6 Supply Chain: Dependency security, SBOM generation, vulnerability management</li> <li>\u2601\ufe0f Cloud Security: IaC hardening, container security, Kubernetes best practices</li> <li>\ud83d\udcf1 Platform Security: Mobile apps, web services, API security</li> <li>\ud83d\udd0d Data Protection: Privacy, encryption at rest/transit, secure storage</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Get started in minutes:</p> <ol> <li>Download the rules from our releases page</li> <li>Copy to your project - Place IDE-specific rules in your repository</li> <li>Start coding - AI assistants will automatically follow security best practices</li> </ol> <p>Get Started \u2192 View on GitHub </p>"},{"location":"#how-it-works","title":"How It Works","text":"<ol> <li>Security rules are written in a unified markdown format</li> <li>Conversion tools translate rules to IDE-specific formats</li> <li>AI assistants reference these rules when generating or reviewing code</li> <li>Secure code is produced automatically without developer intervention</li> </ol>"},{"location":"#community","title":"Community","text":"<ul> <li>\ud83d\udccb Issues: Report bugs or request features</li> <li>\ud83d\udcac Discussions: Join the conversation</li> <li>\ud83e\udd1d Contributing: Learn how to contribute</li> </ul>"},{"location":"#note","title":"Note","text":"<p>This is a strategic move by Cisco to raise the security posture of the entire ecosystem\u2014not just Cisco itself. The health of the broader software community impacts everyone's products, and by sharing this information, we fortify the entire chain. The goal is to create a more secure environment for everyone.</p>"},{"location":"claude-code-skill-plugin/","title":"CodeGuard Claude Code Plugin","text":""},{"location":"claude-code-skill-plugin/#overview","title":"Overview","text":"<p>This document explains how Project CodeGuard is packaged as a Claude Code plugin (Agent Skill) and how to use it effectively in your AI-assisted coding workflows.</p> <p>Project CodeGuard is an open-source, model-agnostic security framework that embeds secure-by-default practices into AI coding workflows. The plugin makes it easy to integrate these security rules with Claude Code.</p>"},{"location":"claude-code-skill-plugin/#what-is-an-agent-skill","title":"What is an Agent Skill?","text":"<p>Agent Skills are model-invoked capabilities that Claude autonomously uses based on task context. The CodeGuard security skill provides comprehensive security guidance that Claude applies automatically when writing, reviewing, or modifying code.</p>"},{"location":"claude-code-skill-plugin/#installation","title":"Installation","text":""},{"location":"claude-code-skill-plugin/#prerequisites","title":"Prerequisites","text":"<ul> <li>Claude Code installed</li> <li>Basic familiarity with Claude Code's plugin system</li> </ul>"},{"location":"claude-code-skill-plugin/#installation-steps","title":"Installation Steps","text":"<ol> <li> <p>Add the Project CodeGuard marketplace: <code>bash    /plugin marketplace add project-codeguard/rules</code></p> </li> <li> <p>Install the security plugin: <code>bash    /plugin install codeguard-security@project-codeguard</code></p> </li> <li> <p>Restart Claude Code (if prompted)</p> </li> <li> <p>Verify installation:    The skill is automatically loaded. Start coding and Claude will apply security rules automatically.</p> </li> </ol>"},{"location":"claude-code-skill-plugin/#how-it-works","title":"How It Works","text":"<p>The CodeGuard skill integrates 22 security rule files covering all major security domains across languages, frameworks, and technology stacks. The skill follows a simple but powerful workflow:</p>"},{"location":"claude-code-skill-plugin/#skill-activation","title":"Skill Activation","text":"<p>The skill activates automatically when: - Writing new code in any language - Reviewing or modifying existing code - Implementing security-sensitive features (authentication, cryptography, data handling) - Working with user input, databases, APIs, or external services - Configuring cloud infrastructure, CI/CD pipelines, or containers - Handling sensitive data, credentials, or cryptographic operations</p>"},{"location":"claude-code-skill-plugin/#security-workflow","title":"Security Workflow","text":"<p>When generating or reviewing code, Claude follows this 3-step workflow:</p> <p>1. Initial Security Check - Will this handle credentials? \u2192 Apply <code>codeguard-1-hardcoded-credentials</code> - What language is being used? \u2192 Identify applicable language-specific rules - What security domains are involved? \u2192 Load relevant rule files</p> <p>2. Code Generation - Apply secure-by-default patterns from relevant CodeGuard rules - Add security-relevant comments explaining choices</p> <p>3. Security Review - Review against implementation checklists in each rule - Verify no hardcoded credentials or secrets - Validate that all applicable rules have been followed - Explain which security rules were applied - Highlight security features implemented</p>"},{"location":"claude-code-skill-plugin/#rule-categories","title":"Rule Categories","text":"<p>Always-Apply Rules (4 critical rules checked on every code operation): - <code>codeguard-1-hardcoded-credentials</code> - Never hardcode secrets or credentials - <code>codeguard-1-crypto-algorithms</code> - Use modern cryptographic algorithms - <code>codeguard-1-digital-certificates</code> - Validate certificate security - <code>codeguard-1-safe-c-functions</code> - Replace unsafe C/C++ functions</p> <p>Context-Specific Rules (18 rules applied based on technology and features): - Input validation, authentication, authorization, APIs, data storage, privacy, logging, cryptography, file handling, serialization, supply chain, DevOps, cloud, Kubernetes, IaC, frameworks, and mobile security</p>"},{"location":"claude-code-skill-plugin/#usage-examples","title":"Usage Examples","text":""},{"location":"claude-code-skill-plugin/#example-1-writing-database-code","title":"Example 1: Writing Database Code","text":"<pre><code># Claude will automatically use parameterized queries\ndef get_user(email):\n    # Secure pattern following codeguard-0-input-validation-injection\n    query = \"SELECT * FROM users WHERE email = ?\"\n    return cursor.execute(query, (email,))\n</code></pre>"},{"location":"claude-code-skill-plugin/#example-2-handling-api-keys","title":"Example 2: Handling API Keys","text":"<pre><code>// Claude will prevent hardcoded credentials\n// and suggest environment variables\nconst apiKey = process.env.STRIPE_API_KEY;\nif (!apiKey) {\n  throw new Error(\"STRIPE_API_KEY not configured\");\n}\n</code></pre>"},{"location":"claude-code-skill-plugin/#example-3-password-hashing","title":"Example 3: Password Hashing","text":"<pre><code># Claude will suggest modern password hashing\nfrom argon2 import PasswordHasher\nph = PasswordHasher()\npassword_hash = ph.hash(password)\n</code></pre>"},{"location":"claude-code-skill-plugin/#example-4-file-upload-security","title":"Example 4: File Upload Security","text":"<pre><code>// Claude will enforce file validation\nconst multer = require('multer');\nconst upload = multer({\n  limits: { fileSize: 5 * 1024 * 1024 }, // 5MB limit\n  fileFilter: (req, file, cb) =&gt; {\n    // Validate file type by content, not just extension\n    if (file.mimetype.startsWith('image/')) {\n      cb(null, true);\n    } else {\n      cb(new Error('Only images allowed'));\n    }\n  }\n});\n</code></pre>"},{"location":"claude-code-skill-plugin/#team-deployment","title":"Team Deployment","text":"<p>For organizations, deploy CodeGuard to all developers automatically:</p> <ol> <li> <p>Add to your project's <code>.claude/settings.json</code>:    <code>json    {      \"marketplaces\": [{\"source\": \"project-codeguard/rules\"}],      \"plugins\": [        {          \"name\": \"codeguard-security\",          \"marketplace\": \"project-codeguard\",          \"enabled\": true        }      ]    }</code></p> </li> <li> <p>Team members trust the repository folder</p> </li> <li> <p>CodeGuard installs automatically for everyone</p> </li> </ol>"},{"location":"claude-code-skill-plugin/#all-security-rules","title":"All Security Rules","text":"<p>The plugin includes 22 comprehensive security rules organized into two categories:</p>"},{"location":"claude-code-skill-plugin/#always-apply-rules-4-rules","title":"Always-Apply Rules (4 rules)","text":"<p>These critical rules are checked on every code operation:</p> Rule Description <code>codeguard-1-hardcoded-credentials</code> Prevent secrets, passwords, API keys, tokens in source code <code>codeguard-1-crypto-algorithms</code> Ban weak algorithms (MD5, SHA-1, DES); use modern alternatives <code>codeguard-1-digital-certificates</code> Validate certificate expiration, key strength, signature algorithms <code>codeguard-1-safe-c-functions</code> Replace unsafe C/C++ functions (gets, strcpy, strcat, sprintf)"},{"location":"claude-code-skill-plugin/#context-specific-rules-18-rules","title":"Context-Specific Rules (18 rules)","text":"<p>These rules apply based on the programming language, framework, or feature being implemented. Claude automatically selects relevant rules based on context:</p> Security Domain Rules Input &amp; Injection <code>codeguard-0-input-validation-injection</code> Authentication <code>codeguard-0-authentication-mfa</code> Authorization <code>codeguard-0-authorization-access-control</code> Sessions <code>codeguard-0-session-management-and-cookies</code> APIs &amp; Web <code>codeguard-0-api-web-services</code>, <code>codeguard-0-client-side-web-security</code> Data &amp; Privacy <code>codeguard-0-data-storage</code>, <code>codeguard-0-privacy-data-protection</code>, <code>codeguard-0-logging</code> Cryptography <code>codeguard-0-additional-cryptography</code> Files &amp; Serialization <code>codeguard-0-file-handling-and-uploads</code>, <code>codeguard-0-xml-and-serialization</code> Infrastructure <code>codeguard-0-supply-chain-security</code>, <code>codeguard-0-devops-ci-cd-containers</code>, <code>codeguard-0-cloud-orchestration-kubernetes</code>, <code>codeguard-0-iac-security</code> Platforms <code>codeguard-0-framework-and-languages</code>, <code>codeguard-0-mobile-apps</code> <p>Note: Each rule file contains detailed guidance, checklists, and examples. Claude references these automatically based on the code context.</p>"},{"location":"claude-code-skill-plugin/#updating","title":"Updating","text":"<p>To update to the latest security rules:</p> <pre><code>/plugin update codeguard-security@project-codeguard\n</code></pre>"},{"location":"claude-code-skill-plugin/#customization","title":"Customization","text":""},{"location":"claude-code-skill-plugin/#disabling-the-plugin","title":"Disabling the Plugin","text":"<p>If needed, temporarily disable:</p> <pre><code>/plugin disable codeguard-security@project-codeguard\n</code></pre> <p>Re-enable:</p> <pre><code>/plugin enable codeguard-security@project-codeguard\n</code></pre>"},{"location":"claude-code-skill-plugin/#using-specific-rule-files","title":"Using Specific Rule Files","text":"<p>All rule files are available in the <code>skills/software-security/rules/</code> directory within the plugin. You can reference specific rules in prompts:</p> <pre><code>Claude, please review this authentication code against the \ncodeguard-0-authentication-mfa.md guidelines\n</code></pre>"},{"location":"claude-code-skill-plugin/#creating-custom-workflows","title":"Creating Custom Workflows","text":"<p>You can create custom security review workflows:</p> <pre><code>Claude, perform the following security checks on this code:\n1. Check for hardcoded credentials\n2. Validate input sanitization\n3. Verify authentication implementation\n4. Review authorization logic\nUse the relevant CodeGuard rules for each check.\n</code></pre>"},{"location":"claude-code-skill-plugin/#troubleshooting","title":"Troubleshooting","text":""},{"location":"claude-code-skill-plugin/#plugin-not-loading","title":"Plugin Not Loading","text":"<ol> <li>Verify installation: <code>/plugin</code> \u2192 \"Manage Plugins\"</li> <li>Check that <code>codeguard-security</code> is listed and enabled</li> <li>Restart Claude Code</li> </ol>"},{"location":"claude-code-skill-plugin/#rules-not-being-applied","title":"Rules Not Being Applied","text":"<ol> <li>Confirm the plugin is enabled</li> <li>Try explicitly mentioning security in your prompt</li> <li>Check that you're working with supported languages</li> </ol>"},{"location":"claude-code-skill-plugin/#checking-plugin-version","title":"Checking Plugin Version","text":"<pre><code>/plugin list\n</code></pre> <p>Look for <code>codeguard-security@project-codeguard</code> and note the version number.</p>"},{"location":"claude-code-skill-plugin/#best-practices","title":"Best Practices","text":""},{"location":"claude-code-skill-plugin/#during-development","title":"During Development","text":"<ol> <li>Trust the automation: Let Claude apply security rules automatically</li> <li>Learn from suggestions: When Claude suggests secure alternatives, understand why</li> <li>Ask for explanations: Request Claude to explain security recommendations</li> <li>Use proactive security: Ask Claude for security guidance before implementing features</li> </ol>"},{"location":"claude-code-skill-plugin/#during-code-review","title":"During Code Review","text":"<ol> <li>Explicit security review: Ask Claude to perform comprehensive security analysis</li> <li>Reference specific rules: Mention rule names for focused review (e.g., \"Review against codeguard-0-authentication-mfa\")</li> <li>Check always-apply rules: Ensure credentials, crypto algorithms, certificates, and C functions are handled securely</li> <li>Validate workflow: Confirm that Claude followed the 3-step security workflow</li> </ol>"},{"location":"claude-code-skill-plugin/#for-teams","title":"For Teams","text":"<ol> <li>Standardize installation: Use <code>.claude/settings.json</code> for consistent setup across the team</li> <li>Version control: Track which plugin version your team uses</li> <li>Update regularly: Keep rules current with latest security guidance</li> <li>Share learnings: Document security patterns specific to your stack</li> <li>Train developers: Ensure team members understand how to work with AI-assisted security</li> </ol>"},{"location":"claude-code-skill-plugin/#building-the-plugin","title":"Building the Plugin","text":"<p>If you're contributing to Project CodeGuard or need to rebuild the plugin:</p> <pre><code>cd /path/to/project-codeguard/rules\n./src/prepare-claude-code-plugin.sh\n</code></pre> <p>This script: - Copies all rule files from <code>rules/</code> to <code>skills/software-security/rules/</code> - Verifies the plugin structure - Prepares the plugin for distribution or local testing</p>"},{"location":"claude-code-skill-plugin/#advanced-usage","title":"Advanced Usage","text":""},{"location":"claude-code-skill-plugin/#language-specific-security-reviews","title":"Language-Specific Security Reviews","text":"<p>Request focused reviews for specific languages:</p> <pre><code>Claude, perform a security review of this Python code with emphasis on:\n- SQL injection prevention\n- Input validation\n- Authentication best practices\n</code></pre>"},{"location":"claude-code-skill-plugin/#feature-specific-guidance","title":"Feature-Specific Guidance","text":"<p>Get proactive security guidance when building features:</p> <pre><code>Claude, I'm about to implement a file upload feature. \nWhat security considerations should I keep in mind \naccording to CodeGuard rules?\n</code></pre>"},{"location":"claude-code-skill-plugin/#security-first-development","title":"Security-First Development","text":"<p>Use CodeGuard from the planning phase:</p> <pre><code>Claude, help me design a secure authentication system for a web app.\nUse CodeGuard rules to guide the architecture.\n</code></pre>"},{"location":"claude-code-skill-plugin/#plugin-architecture","title":"Plugin Architecture","text":""},{"location":"claude-code-skill-plugin/#file-structure","title":"File Structure","text":"<pre><code>project-codeguard/rules/\n\u251c\u2500\u2500 .claude-plugin/\n\u2502   \u251c\u2500\u2500 plugin.json                  # Plugin metadata\n\u2502   \u2514\u2500\u2500 marketplace.json             # Marketplace catalog\n\u2502\n\u251c\u2500\u2500 skills/\n\u2502   \u2514\u2500\u2500 software-security/\n\u2502       \u251c\u2500\u2500 SKILL.md                 # Skill definition and workflow\n\u2502       \u2514\u2500\u2500 rules/                   # All 22 CodeGuard security rules\n\u2502           \u251c\u2500\u2500 codeguard-1-*.md     # 4 always-apply rules\n\u2502           \u2514\u2500\u2500 codeguard-0-*.md     # 18 context-specific rules\n\u2502\n\u2514\u2500\u2500 src/\n    \u2514\u2500\u2500 prepare-claude-code-plugin.sh  # Build script\n</code></pre>"},{"location":"claude-code-skill-plugin/#how-claude-uses-the-skill","title":"How Claude Uses the Skill","text":"<p>When you write or review code, Claude follows this workflow:</p> <ol> <li>Reads SKILL.md - Understands when to activate the skill and what workflow to follow</li> <li>Initial Security Check - Identifies which rules apply based on:</li> <li>Whether credentials are involved (always-apply rule)</li> <li>The programming language in use</li> <li>The security domains involved (auth, crypto, APIs, etc.)</li> <li>Applies Security Rules - References relevant rule files to:</li> <li>Use secure-by-default patterns</li> <li>Follow implementation checklists</li> <li>Apply language-specific guidance</li> <li>Generates Secure Code - Produces code that:</li> <li>Never hardcodes credentials</li> <li>Uses modern cryptographic algorithms</li> <li>Implements input validation</li> <li>Follows security best practices</li> <li>Provides Explanations - Documents which security rules were applied and highlights security features implemented</li> </ol>"},{"location":"claude-code-skill-plugin/#contributing","title":"Contributing","text":"<p>Found an issue with the plugin or want to improve it?</p> <ol> <li>Report issues: GitHub Issues</li> <li>Suggest rules: GitHub Discussions</li> <li>Contribute: Contributing Guide</li> </ol>"},{"location":"claude-code-skill-plugin/#version-history","title":"Version History","text":""},{"location":"claude-code-skill-plugin/#version-100","title":"Version 1.0.0","text":"<ul> <li>Initial release</li> <li>22 comprehensive security rules</li> <li>4 always-apply rules</li> <li>18 context-specific rules</li> <li>Support for all major programming languages</li> <li>Complete technology stack coverage</li> </ul>"},{"location":"claude-code-skill-plugin/#resources","title":"Resources","text":"<ul> <li>Project Website: https://project-codeguard.org</li> <li>GitHub Repository: https://github.com/project-codeguard/rules</li> <li>Documentation: https://project-codeguard.org/getting-started/</li> <li>Issue Tracker: https://github.com/project-codeguard/rules/issues</li> </ul>"},{"location":"claude-code-skill-plugin/#license","title":"License","text":"<ul> <li>Rules: Creative Commons Attribution 4.0 International (CC BY 4.0)</li> <li>Tools: Apache License 2.0</li> </ul>"},{"location":"claude-code-skill-plugin/#support","title":"Support","text":"<p>Need help? We're here for you:</p> <ol> <li>Documentation: Start with Getting Started Guide</li> <li>Community: Join GitHub Discussions</li> <li>Issues: Report bugs via GitHub Issues</li> </ol>"},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"faq/#purpose-statement","title":"Purpose Statement","text":"<p>This FAQ document provides clear, concise answers to help developers seamlessly integrate Project CodeGuard security rules into AI-assisted coding workflows. Our goal is to ensure AI-generated code adheres to secure development practices without disrupting productivity.</p>"},{"location":"faq/#q-where-can-i-access-the-rules","title":"Q: Where can I access the rules?","text":"<p>A: You can access the rules in the Project CodeGuard GitHub repository. The latest stable release is available on the releases page.</p>"},{"location":"faq/#q-how-can-i-use-the-rules-in-windsurf-cursor-or-github-copilot","title":"Q: How can I use the rules in Windsurf, Cursor, or GitHub Copilot?","text":"<p>A: Detailed installation instructions are available in our Getting Started guide. In summary:</p> <ol> <li>Download the latest release from the releases page</li> <li>Extract the archive and copy the IDE-specific rules to your project:</li> <li>Cursor: Copy <code>.cursor/</code> directory to your project root</li> <li>Windsurf: Copy <code>.windsurf/</code> directory to your project root</li> <li>GitHub Copilot: Copy <code>.github/instructions/</code> directory to your project root</li> <li>Restart your IDE and start coding - the AI assistant will automatically follow the security rules</li> </ol>"},{"location":"faq/#q-will-these-rules-consume-a-lot-of-the-ai-agents-context-window","title":"Q: Will these rules consume a lot of the AI agent's context window?","text":"<p>A: No. The always-on rules are designed to be lightweight and efficient, and should not consume a lot of the AI agent's context window. The \"glob\" rules are designed to be applied only to the related file types specified in the rule.</p>"},{"location":"faq/#q-what-is-the-additional_rules-folder","title":"Q: What is the <code>additional_rules</code> folder?","text":"<p>A: The <code>additional_rules</code> folder contains rules that can be used to supplement the Project CodeGuard core rules. These rules are not always-on and are not included in the downloaded release. They are only available in the <code>project-codeguard/rules</code> repository for code review and security assessments post-code generation.</p>"},{"location":"faq/#q-how-can-i-use-the-rules-in-my-own-ai-agent","title":"Q: How can I use the rules in my own AI agent?","text":"<p>A: You can use the rules in your own AI agent by creating a custom ruleset. You can create a custom ruleset by creating a new file in the <code>.cursor/rules</code>, <code>.windsurf/rules</code>, or <code>.github/instructions</code> directories and adding the rules you want to apply. You can also use the <code>project-codeguard/rules</code> repository as a template to create your own ruleset.</p>"},{"location":"faq/#q-why-does-the-downloaded-release-folder-appear-empty","title":"Q: Why does the downloaded release folder appear empty?","text":"<p>A: After downloading and extracting the release, the folders may appear empty because the rule directories (<code>.cursor/</code>, <code>.windsurf/</code>, <code>.github/</code>) start with a dot (<code>.</code>) and are hidden by default on most operating systems.</p> <p>To show hidden files:</p> macOSWindowsLinux <p>In Finder, navigate to the extracted <code>ide_rules/</code> folder and press Cmd+Shift+. to toggle the visibility of hidden files. You should now see the <code>.cursor/</code>, <code>.windsurf/</code>, and <code>.github/</code> directories.</p> <p>In File Explorer:</p> <ol> <li>Navigate to the extracted <code>ide_rules/</code> folder</li> <li>Click on the View tab in the ribbon</li> <li>Check the Hidden items checkbox</li> </ol> <p>In your file manager, press Ctrl+H to toggle hidden files, or use <code>ls -la</code> in the terminal to view all files including hidden ones.</p> <p>Once hidden files are visible, you can copy the appropriate directory (<code>.cursor/</code>, <code>.windsurf/</code>, or <code>.github/</code>) to your project root.</p>"},{"location":"faq/#q-can-i-use-this-with-claude-code","title":"Q: Can I use this with Claude Code?","text":"<p>A: Yes! Claude Code automatically reads and follows instructions from a <code>CLAUDE.md</code> file in your project root. To use Project CodeGuard rules with Claude Code you can point to the Project CodeGuard rules in your <code>CLAUDE.md</code> file.</p> <p>When Claude Code operates in your project, it treats the Project CodeGuard security rules in <code>CLAUDE.md</code> as authoritative system instructions.</p>"},{"location":"faq/#q-how-can-i-report-a-problem-or-enhancement-to-any-of-the-rules","title":"Q: How can I report a problem or enhancement to any of the rules?","text":"<p>A: You can report problems, successes, or suggest enhancements to any of the rules by:</p> <ol> <li>Creating a GitHub issue: Open an issue here</li> <li>Provide details: Include which rule(s) are affected, the issue you encountered, and your suggested improvement</li> <li>Be specific: If reporting a bug, include steps to reproduce and example code if possible</li> </ol> <p>We welcome all feedback - whether it's a bug report, success story, or enhancement suggestion!</p>"},{"location":"faq/#q-why-do-i-get-the-following-error-message-in-github-for-some-of-the-rules","title":"Q: Why do I get the following error message in GitHub for some of the rules?","text":"<pre><code>Error in user YAML: (&lt;unknown&gt;): did not find expected alphabetic \nor numeric character while scanning an alias at line x column x\n</code></pre> <p>A: You can safely ignore this error. GitHub attempts to parse YAML headers combined with markdown content, which can cause this warning. It does not affect rule functionality - the rules will work correctly in your IDE regardless of this GitHub display issue.</p>"},{"location":"faq/#q-how-can-i-contribute-to-these-rules-and-this-project","title":"Q: How can I contribute to these rules and this project?","text":"<p>A: You can contribute at any time by:</p> <ol> <li>Creating a pull request: Submit code, documentation, or rule improvements directly</li> <li>Opening a GitHub issue: Report bugs, suggest new rules, or propose enhancements</li> <li>Participating in discussions: Share your experience and help other users</li> <li>Improving documentation: Help make our docs clearer and more comprehensive</li> </ol> <p>See CONTRIBUTING.md for detailed guidelines on our contribution process.</p>"},{"location":"faq/#still-have-questions","title":"Still have questions?","text":"<p>Can't find your answer? </p> <ul> <li>Open an issue with your question</li> <li>Start a discussion to chat with the community</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Get up and running with Project CodeGuard in just a few steps.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, familiarize yourself with how rules work in your IDE:</p> CursorWindsurfGitHub Copilot <p>Cursor uses <code>.cursor/rules</code> for rule configuration.</p> <p> Cursor Rules Documentation</p> <p>Windsurf uses <code>.windsurf/rules</code> for rule configuration.</p> <p> Windsurf Rules Documentation</p> <p>GitHub Copilot uses <code>.github/instructions</code> for rule configuration.</p> <p> GitHub Copilot Instructions</p>"},{"location":"getting-started/#installation","title":"Installation","text":""},{"location":"getting-started/#option-1-download-pre-built-rules-recommended","title":"Option 1: Download Pre-built Rules (Recommended)","text":"<ol> <li>Download: Visit the Releases page and download the latest release archive</li> <li>Extract: Unzip the downloaded file</li> <li>Install: Copy the relevant IDE-specific rules to your project root:<ul> <li>For Cursor: Copy <code>.cursor/</code> directory</li> <li>For Windsurf: Copy <code>.windsurf/</code> directory</li> <li>For GitHub Copilot: Copy <code>.github/instructions/</code> directory</li> </ul> </li> </ol> <p>Repository Level Installation</p> <p>Installing at the repository level ensures all team members benefit from the security rules automatically when they clone the repository.</p> <p>Hidden Files on macOS/Linux</p> <p>On macOS/Linux, you may need to show hidden files:</p> <ul> <li>macOS Finder: Press Cmd+Shift+. to toggle visibility</li> <li>Linux: Use <code>ls -la</code> in terminal or enable \"Show Hidden Files\" in your file manager</li> </ul>"},{"location":"getting-started/#option-2-build-from-source","title":"Option 2: Build from Source","text":"<p>If you want to customize or contribute to the rules:</p> <pre><code># Clone the repository\ngit clone https://github.com/project-codeguard/rules.git\ncd rules\n\n# Install dependencies (requires Python 3.11+)\nuv sync\n\n# Convert unified rules to IDE-specific formats\nuv run python src/unified_to_all.py rules/ .\n\n# Copy the generated rules to your project\ncp -r ./ide_rules/.cursor/ /path/to/your/project/\ncp -r ./ide_rules/.windsurf/ /path/to/your/project/\ncp -r ./ide_rules/.github/ /path/to/your/project/\n</code></pre>"},{"location":"getting-started/#verify-installation","title":"Verify Installation","text":"<p>After installation, your project structure should include:</p> <pre><code>your-project/\n\u251c\u2500\u2500 .cursor/\n\u2502   \u2514\u2500\u2500 rules/\n\u251c\u2500\u2500 .windsurf/\n\u2502   \u2514\u2500\u2500 rules/\n\u251c\u2500\u2500 .github/\n\u2502   \u2514\u2500\u2500 instructions/\n\u2514\u2500\u2500 ... (your project files)\n</code></pre>"},{"location":"getting-started/#whats-included","title":"What's Included","text":"<p>The security rules cover essential areas:</p>"},{"location":"getting-started/#core-security-rules","title":"Core Security Rules","text":"<ul> <li>\ud83d\udd10 Cryptography: Safe algorithms, secure key management, TLS configuration</li> <li>\ud83d\udee1\ufe0f Input Validation: SQL injection, XSS prevention, command injection defense</li> <li>\ud83d\udd11 Authentication: MFA, OAuth/OIDC, password security, session management</li> <li>\u26a1 Authorization: RBAC/ABAC, access control, privilege escalation prevention</li> </ul>"},{"location":"getting-started/#platform-specific-rules","title":"Platform-Specific Rules","text":"<ul> <li>\ud83d\udcf1 Mobile Apps: iOS/Android security, secure storage, transport security</li> <li>\ud83c\udf10 API Security: REST/GraphQL/SOAP security, rate limiting, SSRF prevention</li> <li>\u2601\ufe0f Cloud &amp; Containers: Docker/Kubernetes hardening, IaC security</li> <li>\ud83d\uddc4\ufe0f Data Storage: Database security, encryption, backup protection</li> </ul>"},{"location":"getting-started/#devops-supply-chain","title":"DevOps &amp; Supply Chain","text":"<ul> <li>\ud83d\udce6 Dependencies: Supply chain security, SBOM, vulnerability management</li> <li>\ud83d\udd04 CI/CD: Pipeline security, artifact signing, secrets management</li> <li>\ud83d\udcdd Logging: Secure logging, monitoring, privacy-aware telemetry</li> </ul>"},{"location":"getting-started/#testing-the-integration","title":"Testing the Integration","text":"<p>To verify the rules are working:</p> <ol> <li>Open your IDE with the Project CodeGuard rules installed</li> <li>Start a new file in a supported language (Python, JavaScript, Java, C/C++, etc.)</li> <li>Ask your AI assistant to generate code that might have security implications:</li> <li>\"Create a function to hash a password\"</li> <li>\"Write code to connect to a database\"</li> <li> <p>\"Generate an API endpoint with authentication\"</p> </li> <li> <p>Observe the output - The AI should automatically apply security best practices:</p> </li> <li>Using strong cryptographic algorithms (bcrypt/Argon2 for passwords)</li> <li>Parameterized queries to prevent SQL injection</li> <li>Proper authentication/authorization checks</li> </ol>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Review Rules: Explore the security rules in your IDE's rules directory</li> <li>Test Integration: Generate some code and see the security guidance in action</li> <li>Share Feedback: Help us improve by opening an issue</li> <li>Contribute: See CONTRIBUTING.md to contribute new rules or improvements</li> </ul> <p>You're Ready!</p> <p>Project CodeGuard is now protecting your development workflow. The security rules will automatically guide AI assistants to generate more secure code.</p>"},{"location":"getting-started/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/#rules-not-working","title":"Rules Not Working","text":"<p>If the AI assistant doesn't seem to follow the rules:</p> <ol> <li>Restart your IDE to ensure rules are loaded</li> <li>Check file location - Ensure rules are in the correct directory for your IDE</li> <li>Verify file format - Rules should be markdown files</li> <li>Test with explicit request - Ask the AI directly: \"Follow the security rules when generating this code\"</li> </ol>"},{"location":"getting-started/#performance-impact","title":"Performance Impact","text":"<p>The rules have minimal performance impact, but if you experience issues:</p> <ul> <li>Reduce rule count: Start with core rules (cryptography, input validation, authentication)</li> <li>Combine rules: Merge related rules into fewer files</li> <li>Report issues: Let us know via GitHub Issues</li> </ul>"},{"location":"getting-started/#getting-help","title":"Getting Help","text":"<ul> <li>Documentation: You're reading it! Check the FAQ for common questions</li> <li>GitHub Issues: Report bugs or ask questions</li> <li>Discussions: Join the community discussion</li> </ul>"}]}